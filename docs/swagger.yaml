basePath: /
definitions:
  gateway.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  service_models.ChangePassword:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  service_models.ForgotPasswordRequest:
    properties:
      username:
        type: string
    type: object
  service_models.Job:
    properties:
      company:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      location:
        type: string
      salary:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  service_models.LoginAuthPayload:
    properties:
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - password
    - username
    type: object
  service_models.RegisterAuthPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  service_models.UpdateUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        type: string
      username:
        maxLength: 100
        type: string
    type: object
  service_models.User:
    properties:
      create_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      password:
        type: string
      profile_picture:
        type: string
      update_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a web API server.
  title: Golang Web API
  version: "1.0"
paths:
  /swagger:
    get:
      consumes:
      - application/json
      description: Provides access to the Swagger UI
      produces:
      - application/json
      responses:
        "200":
          description: Swagger UI
          schema:
            type: string
      summary: Swagger Documentation
  /v1/forgotpassword:
    post:
      consumes:
      - application/json
      description: Requests a password reset for the provided username and returns
        a password if successful.
      parameters:
      - description: User's username for password reset
        in: body
        name: ForgotPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/service_models.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      summary: Password reset request
      tags:
      - Authentication
  /v1/healthcheck:
    get:
      description: Returns the current status of the application, including its environment
        and version details.
      produces:
      - application/json
      responses:
        "200":
          description: Health check status, environment, and version
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      summary: Health check endpoint
      tags:
      - Health
  /v1/jobs:
    get:
      description: Fetches a list of all job listings available in the system.
      produces:
      - application/json
      responses:
        "200":
          description: List of all jobs
          schema:
            items:
              $ref: '#/definitions/service_models.Job'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve all job listings
      tags:
      - Jobs
    post:
      consumes:
      - application/json
      description: Creates a new job listing with the provided job details. The job
        is associated with the authenticated user.
      parameters:
      - description: Job Details
        in: body
        name: Job
        required: true
        schema:
          $ref: '#/definitions/service_models.Job'
      produces:
      - application/json
      responses:
        "201":
          description: Job successfully created
          schema:
            $ref: '#/definitions/service_models.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new job listing
      tags:
      - Jobs
  /v1/jobs/{id}:
    delete:
      description: Deletes a job listing by its ID. Only the user who created the
        job or an admin can delete it.
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: The job was successfully deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a job listing
      tags:
      - Jobs
    get:
      description: Fetches a job listing based on the provided job ID.
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job listing details
          schema:
            $ref: '#/definitions/service_models.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve a job listing by ID
      tags:
      - Jobs
    put:
      description: Updates the details of a job listing, based on the provided job
        ID and job data.
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job data to update
        in: body
        name: job
        required: true
        schema:
          $ref: '#/definitions/service_models.Job'
      produces:
      - application/json
      responses:
        "200":
          description: Updated job details
          schema:
            $ref: '#/definitions/service_models.Job'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing job listing
      tags:
      - Jobs
  /v1/jobsByUser:
    get:
      description: Fetches a list of all job listings associated with a specific user
        based on the user ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of jobs for the specified user
          schema:
            items:
              $ref: '#/definitions/service_models.Job'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve all job listings by user ID
      tags:
      - Jobs
  /v1/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token if the credentials
        are valid.
      parameters:
      - description: Login credentials
        in: body
        name: LoginAuthPayload
        required: true
        schema:
          $ref: '#/definitions/service_models.LoginAuthPayload'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /v1/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided username, password, and
        email.
      parameters:
      - description: User registration credentials
        in: body
        name: RegisterAuthPayload
        required: true
        schema:
          $ref: '#/definitions/service_models.RegisterAuthPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/service_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      summary: User registration
      tags:
      - Authentication
  /v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users. Requires an authorization token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service_models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Retrieve all users
      tags:
      - Users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by ID. Only an admin user can delete another user.
        You cannot delete yourself.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Fetch a user's details using their unique ID. Requires an authorization
        token.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the user profile (username and email). Requires authorization
        token and admin check.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Profile Information
        in: body
        name: updateUser
        required: true
        schema:
          $ref: '#/definitions/service_models.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - Users
  /v1/users/{id}/changePassword:
    put:
      consumes:
      - application/json
      description: Changes the password for the authenticated user. The user must
        provide their current password and the new password.
      parameters:
      - description: Change Password Request
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/service_models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password successfully changed
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Change password
      tags:
      - Users
  /v1/users/{id}/picture:
    put:
      consumes:
      - multipart/form-data
      description: Update the user's profile picture. Requires authorization token
        and admin check.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Profile Picture File
        in: formData
        name: profile_picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile picture updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gateway.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile picture
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
